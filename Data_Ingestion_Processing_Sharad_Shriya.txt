--                                              DATA INGESTION AND PROCESSING CASE STUDY

USE Shriya;

-- Running the necessary command before creating a table
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

-- Dropping the Table if it exists
DROP TABLE Nyc_Taxi;

--Creating External Table
CREATE EXTERNAL TABLE IF NOT EXISTS Nyc_Taxi(VendorID int,
tpep_pickup_datetime timestamp,
tpep_dropoff_datetime timestamp,
Passenger_count int,
Trip_distance double,
RateCodeID int,
Store_and_fwd_flag string,
PULocationID int,
DOLocationID int,
Payment_type int,
Fare_amount double,
extra double,
MTA_tax double,
Tip_amount double,
Tolls_amount double,
Improvement_surcharge double,
Total_amount double)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
LOCATION '/common_folder/nyc_taxi_data/'
TBLPROPERTIES ("skip.header.line.count"="1");

-- Viewing the table "Nyc_Taxi"
SELECT * FROM Nyc_Taxi LIMIT 10;

--Querying to check total number of records in the dataset
SELECT COUNT(*) AS `No_of_records` FROM Nyc_Taxi;  -- There are 1174569 records in the dataset.


--                                                  BASIC DATA QUALITY CHECKS


-- 1. How many records has each TPEP provider provided? Write a query that summarises the number of records of each provider.
SELECT VendorID,COUNT(*) as No_of_records
FROM Nyc_Taxi
GROUP BY VendorID
ORDER BY VendorID;

-- Vendor 1: Creative Mobile Technologies has 5,27,386 records
-- Vendor 2: VeriFone Inc has 6,47,183 records

/* 2. The data provided is for months November and December only. 
    Check whether the data is consistent, and if not, identify the data quality issues. 
    Mention all data quality issues in comments. */

-- Checking "tpep_pickup_datetime" column for inconsistencies
SELECT VendorID,YEAR(tpep_pickup_datetime) as `year`,MONTH(tpep_pickup_datetime) as `month`, COUNT(*) as No_of_records
FROM Nyc_Taxi
GROUP BY VendorID,YEAR(tpep_pickup_datetime),MONTH(tpep_pickup_datetime)
ORDER BY VendorID,`year`,`month`;

/* 	VendorID	year	month   	No_of_records
	    1	    2017	11	        261282
	    1	    2017	12	        266104
	    2	    2003	1	        1
	    2	    2008	12	        2
	    2	    2009	1	        1
	    2	    2017	10	        6
	    2	    2017	11	        319018
	    2	    2017	12	        328151
	    2	    2018	1       	4
    
We can see that there are 8 records from other years and 6 records which are from the month of October, 2017. 
We can also see that all the erroneous records (14 records) provided are by vendor 2- VeriFone Inc.*/


-- Checking "tpep_dropoff_datetime" column for inconsistencies
SELECT VendorID,YEAR(tpep_dropoff_datetime) AS `year`,MONTH(tpep_dropoff_datetime) AS `month`, COUNT(*) as No_of_records
FROM Nyc_Taxi
GROUP BY VendorID,YEAR(tpep_dropoff_datetime),MONTH(tpep_dropoff_datetime)
ORDER BY VendorID,`year`,`month`;

/* 	vendorid	year	month	No_of_records
	    1	    2017	11	    261202
	    1	    2017	12  	266155
	    1	    2018	1	    28
	    1	    2019	4	    1
	    2	    2003	1	    1
	    2	    2008	12	    1
	    2	    2009	1	    2
	    2	    2017	10	    2
	    2	    2017	11	    318851
	    2       2017	12	    328244
   	    2	    2018	1	    82

We can see that there are 115 records from other years(2003,2008,2009,2018,2019) and 2 records which are from the month of October, 2017. 
We can also see that out of the 7 erroneous records, 6 records are by vendor 2 and 1 erroneous records are by vendor 1.
We will look at the 2018 records. */

-- Checking 2018 records for "tpep_dropoff_datetime"
SELECT VendorID,DATE(nyc_taxi.tpep_pickup_datetime) AS pickup_date, DATE(nyc_taxi.tpep_dropoff_datetime) AS dropoff_date, COUNT(*) AS No_of_records
FROM Nyc_Taxi
WHERE YEAR(tpep_dropoff_datetime)=2018
GROUP BY VendorID,DATE(nyc_taxi.tpep_dropoff_datetime), DATE(nyc_taxi.tpep_pickup_datetime)
ORDER BY No_of_records DESC;

/* 
 	VendorID     pickup_date	dropoff_date	no_of_records
 	  2          2017-12-31	    	2018-01-01	    78
 	  1          2017-12-31	    	2018-01-01	    28
	  2          2018-01-01	    	2018-01-01	    4    
	
We will consider those rides which started on 31st of december, 2017 and ended on 1st January,2018 for our analysis. 
However, we will not consider any rides which started in 2018. We can consider the 4 rides which start in 2018 as erroneous
All 4 of these records are provided by Vendor 2. */


/* 3. You might have encountered unusual or erroneous rows in the dataset. 
    Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset? 
    Summarise your conclusions based on every column where these errors are present. For example,  
    There are unusual passenger count, i.e. 0 which is unusual. */
    
-- Checking if any of the records are null
SELECT COUNT(*) as null_records
FROM Nyc_Taxi
WHERE VendorID IS NULL OR 
tpep_pickup_datetime IS NULL OR
tpep_dropoff_datetime IS NULL OR
Passenger_count IS NULL OR
Trip_distance IS NULL OR
RateCodeID IS NULL OR
Store_and_fwd_flag IS NULL OR
PULocationID IS NULL OR
DOLocationID IS NULL OR
Payment_type IS NULL OR
Fare_amount IS NULL OR
extra IS NULL OR
MTA_tax IS NULL OR
Improvement_surcharge IS NULL OR 
Tip_amount IS NULL OR
Tolls_amount IS NULL OR
Total_amount IS NULL;
-- There are no null values in the dataset provided.

-- Checking for records if any, where the pick up time is greater or equal to the drop off time
SELECT VendorID, COUNT(*) as No_of_records
FROM Nyc_Taxi
WHERE tpep_pickup_datetime >= tpep_dropoff_datetime
GROUP BY VendorID;

/* There are 6555 records where the pickup time is greater than or equal to the dropoff time. 3492 of these records are from Vendor 1 and 
    3063 records are from Vendor 2. These will be considered as erroneous.  */


-- Checking issues with "Passenger_count" column
SELECT VendorID,Passenger_count, COUNT(*) AS No_of_records
FROM Nyc_Taxi
GROUP BY VendorID,Passenger_count
ORDER BY VendorID,No_of_records DESC;

/* There are 6813 records which show 0 as the Passenger Count provided by vendor 1 and 11 records which show 0 
    as the Passenger count as provided by vendor 2. These are considered as erroneous records. The maximum passenger count in the
    dataset is 9 passengers, which can easily be accomodated in a large car such as a limousine. Hence, we will consider only 0 as 
    an erroneous value. */

-- Checking issues with "Trip_distance" column
SELECT VendorID,MAX(Trip_distance) AS max_trip_distance, MIN(Trip_distance) AS min_trip_distance
FROM Nyc_Taxi
GROUP BY VendorID
ORDER BY VendorID;

/*  The max trip distance is 102.4 miles for vendor 1 and 126.41 miles for vendor 2.The minimum trip distance is 0 miles 
    for both vendors. There are no negative values in the column. */

-- Checking columns where trip distance is 0 miles but trip_amount is equal to 0.
SELECT VendorID,COUNT(*) AS No_of_records 
FROM Nyc_Taxi 
WHERE trip_distance = 0 AND total_amount = 0 
GROUP BY VendorID
ORDER BY VendorID;

/*  There are 38 trips by vendor 1 and 70 trips by vendor 2 where trip distance is 0 and total_amount paid is also 0.
    We will not consider these as erroneous as these can be cancelled rides.But there can be entries where trip_distance is 0 
    but total_amount is greater than 0. Let's check those*/


-- Checking columns where trip distance is 0 miles but trip_amount is greater than 0.
SELECT VendorID,COUNT(*) AS No_of_records 
FROM Nyc_Taxi 
WHERE trip_distance = 0 AND total_amount > 0 
GROUP BY VendorID
ORDER BY VendorID;

/*  There are 4179 trips by vendor 1 and 3018 trips by vendor 2 where trip distance is 0 and total_amount 
    paid is greater than 0.We will consider these as erroneous. */


-- Checking for any negative values in "PULocationId" and "DOLocationID" column
SELECT PULocationID, DOLocationID
FROM Nyc_Taxi
WHERE PULocationID<0 OR DOLocationID<0;

-- All the values in the two columns are positive.

-- Checking the "RateCodeID" column. The values should lie between 1 and 6. 
SELECT VendorID, RateCodeID, COUNT(*) AS No_of_records
FROM Nyc_Taxi
GROUP BY VendorID, RateCodeID
ORDER BY VendorID, RateCodeID;

/* There are 8 records which have "99" as the RateCodeID by vendor 1 and 1 record which shows "99" as the 
    RateCodeID by vendor 2. These are erroneous as the values in the column should lie between 1 and 6. */
    
-- Checking "Store_and_fwd_flag" column
SELECT VendorID,store_and_fwd_flag, COUNT(*) AS No_of_records
FROM Nyc_taxi
GROUP BY VendorID, store_and_fwd_flag
ORDER BY VendorID;

/* The Records are inline with the data dictionary with either an Yes or No. There are no errors in data provided.
    However, Majority of the records have 'N' which means "not a store and forward trip". */

-- Checking "Payment_type" column. The values should be between 1 and 6.
SELECT VendorID, Payment_type, COUNT(*) AS No_of_records
FROM Nyc_Taxi
GROUP BY VendorID, Payment_type
ORDER BY VendorID, Payment_type;

/*  Both vendor 1 and vendor 2 show 4 payment types (1,2,3 and 4). Maximum payments are made through credit cards.
    All the records are in-line with the data dictionary. There are no inconsistencies. */

-- Checking the "Fare_amount" column
SELECT VendorID,COUNT(*) AS No_of_records
FROM Nyc_Taxi 
WHERE Fare_amount <0 
GROUP BY VendorID;

/*  There are 558 records from Vendor 2 where the fare amount is less than 0. This seems to be erroneous. There are 
    no records provided by vendor 1 which is less than 0 for this column. */

-- Checking the "Extra" column
SELECT VendorID, Extra, COUNT(*) AS No_of_Records
FROM Nyc_Taxi
WHERE extra NOT IN (0, 0.5, 1)
GROUP BY VendorID,Extra 
ORDER BY VendorID,Extra;

/* Extra charges and surcharges can only take up the values $0.50 and $1 rush hour and overnight charges or 0 otherwise.
    All other values can be treated as erroneous. They are 4856 records which show error (i.e Take up other values like
    -10.6, 1.5, 2, 4.5 etc.). 1823 of these records are provided by Vendor 1 and 3033 records provided by Vendor 2. */

-- Checking "MTA_tax" column
SELECT VendorID, MTA_tax, COUNT(*) AS No_of_Records
FROM Nyc_Taxi
WHERE MTA_tax NOT IN (0,0.5)
GROUP BY VendorID,MTA_tax
ORDER BY VendorID,MTA_tax;

/* According to the data dictionary, the MTA_tax column can take up only $0.50 which is automatically triggered 
    based on the metered rate in use, else 0. A Total of 548 records in the dataset ( having values -0.5,3,11.4) 
    are erroneous. Only 1 erroneous record is provided by Vendor 1 while 547 erroneous records are provided by Vendor 2. */

-- Checking "Improvement_surcharge" column
SELECT VendorID, Improvement_surcharge, COUNT(*) AS No_of_Records
FROM Nyc_Taxi
WHERE Improvement_surcharge NOT IN (0,0.30)
GROUP BY VendorID,Improvement_surcharge
ORDER BY VendorID,Improvement_surcharge;

/* According to the data dictionary, the Improvement_surcharge column can take up only $0.30 or 0.
    Total of 562 records ( having values -0.3,1) in the dataset are erroneous. All of these records are provided by Vendor 2. */
    
-- Checking "Tip_amount" column
SELECT VendorID, COUNT(*) AS No_of_records
FROM Nyc_Taxi
WHERE Tip_amount<0
GROUP BY VendorID;

/* There are 4 records where the Tip amount generated is less than 0. All 4 of these records are by vendor 2.
    These can be considered as errors. */
   
-- Checking "Tolls_amount" column 
SELECT VendorID, COUNT(*) AS No_of_records
FROM Nyc_Taxi
WHERE Tolls_amount<0
GROUP BY VendorID;

/* There are 3 records where the Tolls amount generated is less than 0. All 3 of these records are by vendor 2.
    These can be considered as errors. */
    
-- Checking "Total_amount" column
SELECT VendorID, COUNT(*) AS No_of_records
FROM Nyc_Taxi
WHERE Total_amount<0
GROUP BY VendorID;

-- There are 558 records from Vendor 2 where the Total amount is less than 0.This seems to be erroneous.

-- Checking which vendor is doing a bad job in providing the records - SUMMARY
SELECT VendorID,COUNT(*) AS No_of_Records
FROM Nyc_Taxi
WHERE (DATE(tpep_pickup_datetime) <'2017-11-01' OR
DATE(tpep_pickup_datetime)>'2017-12-31' OR
DATE(tpep_dropoff_datetime) < '2017-11-01' OR
DATE(tpep_dropoff_datetime)>'2018-01-01' OR
tpep_pickup_datetime >= tpep_dropoff_datetime OR 
Passenger_count = 0 OR 
Trip_distance<0 OR
(Trip_distance=0 AND Total_amount>0) OR
RateCodeID NOT IN (1,2,3,4,5,6) OR
Fare_amount< 0 OR 
Extra NOT IN (0,0.5,1) OR 
MTA_tax NOT IN (0,0.5) OR 
Improvement_surcharge NOT IN (0,0.3) OR
Tip_amount <0 OR 
Tolls_amount<0 OR
Total_amount<0)
GROUP BY VendorID
ORDER BY VendorID;

/*  vendorid	no_of_records
	    1	        13551
	    2	        7227

We can see that vendor 1 is doing a bad job in providing the records as out of a total of 20,778 records, 
13551 erroneous records are provided by Vendor 1 compared to 7227 erroneous records provided by Vendor 2. */


/* CONDITIONS CONSIDERED WHILE DATA CLEANING

1. tpep_pickup_datetime timestamp - Only data belonging to november and december of the year 2017 will be considered.
2. tpep_dropoff_datetime timestamp - Only data belonging to november and december of the year 2017 will be considered. 
                                    Trips starting on 31-12-2017 and ending on 1-1-2018 will be considered. Only
                                    those rows will be considered where the tpep_dropoff_datetime > tpep_pickup_datetime.
3. Passenger_count - The data contains passengers in the range 0 to 9. Only 0 will considered as invalid.
4. Trip_distance - Trip distances of greater than or equal to $0 will be considered.
5. RateCodeID - Values in the range 1 to 6 are considered valid.
6. Fare_amount - Any fare amount greater than or equal to $0 will be considered as valid.
7. extra - $0.50 and $1 are considered as valid extra charges, and $0 otherwise.
8. MTA_tax - $0 and $0.50 will considered as valid values for this column.
9. Improvement_surcharge - $0 and $0.30 will considered as valid values for this column.
10. Tip_amount - All tip amounts greater than or equal to $0 will be considered.
11. Tolls_amount - All toll amounts greater than or equal to $0 will be considered.
12. Total_amount - All the rows with total amount greater than or equal to $0 will be considered. We will not consider the 
                    records where Trip distance is 0 but Total_amount is greater than 0.*/


-- CREATING A CLEAN, ORC PARTITIONED TABLE

-- Running necessary commands before Partitioning 
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- Dropping table if it already exists
DROP TABLE Nyc_Taxi_Partition_ORC;

-- Creating ORC Table
CREATE EXTERNAL TABLE IF NOT EXISTS Nyc_Taxi_Partition_ORC
(VendorID int, tpep_pickup_datetime timestamp, tpep_dropoff_datetime timestamp, Passenger_count int, Trip_distance double,
RateCodeID int, Store_and_fwd_flag string, PULocationID int, DOLocationID int, Payment_type int, Fare_amount double, extra double, 
MTA_tax double, Improvement_surcharge double, Tip_amount double, Tolls_amount double, Total_amount double) 
PARTITIONED BY (mnth int)
STORED AS orc 
LOCATION '/user/hive/warehouse/Shriya'
TBLPROPERTIES ("orc.compress"="SNAPPY");

-- Test Query
SELECT * FROM Nyc_Taxi_Partition_ORC;

-- Writing Data into ORC table from the Nyc_Taxi Table


INSERT OVERWRITE TABLE Nyc_Taxi_Partition_ORC PARTITION(mnth)
SELECT VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, Passenger_count, Trip_distance,
RateCodeID, Store_and_fwd_flag, PULocationID, DOLocationID, Payment_type, Fare_amount, extra, 
MTA_tax, Improvement_surcharge, Tip_amount, Tolls_amount, Total_amount, MONTH(tpep_pickup_datetime) AS mnth
FROM Nyc_Taxi
WHERE DATE(tpep_pickup_datetime) >='2017-11-01' AND 
DATE(tpep_pickup_datetime)<='2017-12-31' AND
DATE(tpep_dropoff_datetime) >= '2017-11-01' AND
DATE(tpep_dropoff_datetime)<='2018-01-01' AND
UNIX_TIMESTAMP(tpep_dropoff_datetime) > UNIX_TIMESTAMP(tpep_pickup_datetime) AND 
Passenger_count != 0 AND 
Trip_distance >= 0.0 AND
(Trip_distance > 0 OR Total_amount = 0) AND   --this line of code removes all entries where Trip_distance=0 but Total_amount>0"
RateCodeID IN (1,2,3,4,5,6) AND 
Fare_amount >= 0.0 AND
extra in (0,0.5,1) AND
mta_tax in (0,0.5) AND
tip_amount>=0.0 AND 
tolls_amount >= 0.0 AND 
improvement_surcharge IN (0,0.3) AND
total_amount >= 0.0;

-- Counting the number of records after cleaning data
SELECT COUNT(*) FROM Nyc_Taxi_Partition_ORC; -- 1153791 rows are left post data cleaning. 


-- ANALYSIS I

-- 1. Compare the overall average fare per trip for November and December.
SELECT Mnth AS `Month`, ROUND(AVG(Fare_amount),2) AS Avg_Fare
FROM Nyc_Taxi_Partition_ORC
GROUP BY Mnth
ORDER BY Mnth;

/*      month	avg_fare
    	11	    12.9
    	12	    12.7

    Average fare in the month of november is slightly higher than the average fare in the month of December.  */

-- 2. Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? Do most people travel solo or with other people?
SELECT Passenger_count, COUNT(*) AS No_of_trips, CAST(COUNT(*)*100/SUM(COUNT(*)) OVER() AS DECIMAL(10,2)) as percentage
FROM Nyc_Taxi_Partition_ORC
GROUP BY Passenger_count
ORDER BY No_of_Trips DESC;

/* 
 	passenger_count	    no_of_trips	 percentage
	1	                817177	     70.83
	2	                174812	     15.15
	5	                54038	     4.68
	3	                50191	     4.35
	6	                32882	     2.85
	4	                24688	     2.14
	7	                3            0
	
From the above results obtained, we can see that around 71% of the people travel solo. */
	
-- 3. Which is the most preferred mode of payment?
SELECT Payment_type , COUNT(*) as No_of_records, CAST(COUNT(*)*100/SUM(COUNT(*)) OVER() AS DECIMAL(10,2)) AS percentage
FROM Nyc_Taxi_Partition_ORC
GROUP BY Payment_type
ORDER BY No_of_records DESC;

/*
 	payment_type	no_of_records   percentage
	1	            779199          67.53
	2	            368733          31.96
	3	            4553            0.39
	4	            1306            0.11
	
Credit card is the most preferred method of payment and is used by 67.53% of the people. 
Cash is the second most popular payment method. */

-- 4. What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’.
SELECT round(AVG(Tip_amount),2) AS Average_tip,
ROUND(PERCENTILE_APPROX(tip_amount,0.25),2) AS `25th_percentile`, 
ROUND(PERCENTILE_APPROX(tip_amount,0.50),2) AS `50th_percentile`, 
ROUND(PERCENTILE_APPROX(tip_amount,0.75),2) AS `75th_percentile`
FROM Nyc_Taxi_Partition_ORC;

/*  The average tip amount is $1.83. 
    25th percentile value of the tip amount is $0,
    50th percentile value of the tip amount is $1.35 and
    75th percentile value of the tip amount is $2.45.
    
The average tip paid ($1.83) is not equal to the 50th percentile value ($1.35) of the tip paid and 
hence is not a representative statistic (of the central tendency) of the tip paid. */


-- 5. Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?
SELECT ROUND((SUM(IF( extra != 0, 1 , 0 ))/COUNT(*)) * 100,2) AS Percentage_Extra_charge_levied,
ROUND((SUM(IF( extra = 0, 1 , 0 ))/COUNT(*)) * 100,2) AS Percentage_Extra_charge_not_levied
FROM Nyc_Taxi_Partition_ORC;

/*  Percentage of total trips which have an extra charge levied = 46.14 %
    Percentage of total trips which have an extra charge levied = 53.86 % 
There are more number of trips where extra charges are not levied. */

-- ANALYSIS II

-- 1. What is the correlation between the number of passengers on any given trip, and the tip paid per trip? Do multiple travellers tip more compared to solo travellers?
SELECT ROUND(CORR(Passenger_count, Tip_amount),3) AS correlation
FROM Nyc_Taxi_partition_ORC;

/*  The correlation between Number of passengers and the tips paid per trip is -0.005. This is a weak negative relation, hence we 
    cannot conlcude that the tip amount increases with the passenger count.*/


-- 2. Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).
SELECT Tip_bucket, ROUND(COUNT(*)/MAX(No_of_records)*100,2)AS Percentage_share
FROM (SELECT *, COUNT(*) OVER () AS No_of_records,
	CASE 
	when tip_amount >= 0 and tip_amount<5 then '0_to_5' 
	when tip_amount >=5 and tip_amount<10 then '5_to_10'
	when tip_amount >=10 and tip_amount<15 then '10_to_15'
	when tip_amount >=15 and tip_amount<20 then '15_to_20'
	else 'Greater_than_20' 
	END AS Tip_Bucket 
    FROM nyc_taxi_partition_orc)as bucket_table
GROUP BY Tip_Bucket
ORDER BY Percentage_share DESC;

/*      tip_bucket	    percentage_share
    	0_to_5	            92.4
    	5_to_10	            5.64
    	10_to_15	        1.68
    	15_to_20	        0.19
    	Greater_than_20     0.09
    	
We can infer that most (92.4 %) passengers tip less than 5 dollars. */


-- 3. Which month has a greater average ‘speed’ - November or December? Note that the variable ‘speed’ will have to be derived from other metrics. Hint: You have columns for distance and time.
SELECT mnth,ROUND(AVG(trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)),2) AS Average_speed_MPH
FROM Nyc_Taxi_partition_orc
GROUP BY mnth
ORDER BY mnth;

/*
 	mnth	average_speed_MPH
 	11	    10.97
 	12	    11.07
The average speed of December is greater than the average speed of November by 0.1 Miles/Hour. */


-- 4. Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average. 

SELECT ROUND(AVG(CASE WHEN mnth=12 AND DAY(tpep_pickup_datetime)=25 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE NULL END),2)as Christmas_Avg_Speed, 
ROUND(AVG(CASE WHEN mnth=12 AND DAY(tpep_pickup_datetime)=31 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE NULL END),2)as NewYear_Avg_Speed, 
ROUND(AVG(CASE WHEN mnth=12 AND DAY(tpep_pickup_datetime) in (25,31) THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE NULL END),2)as Christmas_and_NewYear_Avg_Speed, 
ROUND(AVG(trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)),2) AS Overall_Avg_Speed
FROM Nyc_Taxi_partition_orc;

/*  The average speed during Christmas is 15.27 Miles/Hour
    The average speed during New Year is 13.25 Miles/Hour
    The average overall speed is 11.02 Miles/Hour
    The average speed during christmas and New year's combined is 14.02 Miles/Hour
Thus, the average speed is considerably higher during the most happening days of the year by about 3 Miles/Hour compared to the overall average. */